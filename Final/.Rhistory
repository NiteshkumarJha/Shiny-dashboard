MAPE = (sum(train_ANN$APE)/SampleSize)*100
statistics = c("SampleSize", "MSE", "RMSE", "MAE", "MAPE")
Value = rbind(SampleSize, MSE, RMSE, MAE, MAPE)
train_statistics <- data.frame(cbind(statistics, Value))
train_statistics$training_set <- train_statistics$V2
train_statistics$V2 <- NULL
rownames(train_statistics) <-  NULL
library(forecast)
prediction_SES <- forecast(SimpleExpSmooth, h=30)
plot(prediction_SES)
Forecast = as.data.frame(prediction_SES$mean)
test_ANN = test[,c("YEAR", "ANN")]
test_ANN = cbind(test_ANN, Forecast)
test_ANN = data.table(test_ANN)
setnames(test_ANN, 'x', 'Forecast')
test_ANN$Error = (test_ANN$ANN - test_ANN$Forecast)^2
test_ANN$AbsError = abs(test_ANN$ANN - test_ANN$Forecast)
test_ANN$APE = abs(test_ANN$ANN - test_ANN$Forecast)/test_ANN$ANN
kable(test_ANN)%>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
SampleSize = nrow(test_ANN)
MSE = sum(test_ANN$Error)/SampleSize
RMSE = sqrt(MSE)
MAE = sum(test_ANN$AbsError)/SampleSize
MAPE = (sum(test_ANN$APE)/SampleSize)*100
statistics = c("SampleSize", "MSE", "RMSE", "MAE", "MAPE")
Value = rbind(SampleSize, MSE, RMSE, MAE, MAPE)
test_statistics <- data.frame(cbind(statistics, Value))
test_statistics$testing_set <- test_statistics$V2
test_statistics$V2 <- NULL
rownames(test_statistics) <-  NULL
Finalresult_SES = merge(train_statistics, test_statistics, by ="statistics")
kable(Finalresult_SES)%>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
# Exponetial Smoothing
ExpSmooth <- HoltWinters(train.ts[,18], gamma = FALSE)
ExpSmooth
# Plotting the estimates
plot(ExpSmooth)
train_forecast = as.data.frame(ExpSmooth$fitted)
train_ANN = train[,c("YEAR", "ANN")]
train_ANN = train_ANN[3:116, ]
train_ANN = cbind(train_ANN, train_forecast)
train_ANN$xhat <- NULL
setnames(train_ANN, "level", "Forecast")
train_ANN$Error = (train_ANN$ANN - train_ANN$Forecast)^2
train_ANN$AbsError = abs(train_ANN$ANN - train_ANN$Forecast)
train_ANN$APE = abs(train_ANN$ANN - train_ANN$Forecast)/train_ANN$ANN
SampleSize = nrow(train_ANN)
MSE = sum(train_ANN$Error)/SampleSize
RMSE = sqrt(MSE)
MAE = sum(train_ANN$AbsError)/SampleSize
MAPE = (sum(train_ANN$APE)/SampleSize)*100
statistics = c("SampleSize", "MSE", "RMSE", "MAE", "MAPE")
Value = rbind(SampleSize, MSE, RMSE, MAE, MAPE)
train_statistics <- data.frame(cbind(statistics, Value))
train_statistics$training_set <- train_statistics$V2
train_statistics$V2 <- NULL
rownames(train_statistics) <-  NULL
library(forecast)
prediction_SES <- forecast(ExpSmooth, h=30)
plot(prediction_SES)
Forecast = as.data.frame(prediction_SES$mean)
test_ANN = test[,c("YEAR", "ANN")]
test_ANN = cbind(test_ANN, Forecast)
test_ANN = data.table(test_ANN)
setnames(test_ANN, 'x', 'Forecast')
test_ANN$Error = (test_ANN$ANN - test_ANN$Forecast)^2
test_ANN$AbsError = abs(test_ANN$ANN - test_ANN$Forecast)
test_ANN$APE = abs(test_ANN$ANN - test_ANN$Forecast)/test_ANN$ANN
kable(test_ANN)%>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
SampleSize = nrow(test_ANN)
MSE = sum(test_ANN$Error)/SampleSize
RMSE = sqrt(MSE)
MAE = sum(test_ANN$AbsError)/SampleSize
MAPE = (sum(test_ANN$APE)/SampleSize)*100
statistics = c("SampleSize", "MSE", "RMSE", "MAE", "MAPE")
Value = rbind(SampleSize, MSE, RMSE, MAE, MAPE)
test_statistics <- data.frame(cbind(statistics, Value))
test_statistics$testing_set <- test_statistics$V2
test_statistics$V2 <- NULL
rownames(test_statistics) <-  NULL
Finalresult_ES = merge(train_statistics, test_statistics, by ="statistics")
kable(Finalresult_ES)%>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
ggAcf(train.ts[,18],main="non differenced data",lag=40)
ggPacf(train.ts[,18],main="non differenced data",lag=40)
# fitting the model
ar3 <- arima(train.ts[,18], order=c(3, 0, 0))
ar3
# calculate train accuracy
train_forecast = as.data.frame(fitted(ar3))
train_ANN = train[,c("YEAR", "ANN")]
#train_ANN = train_ANN[3:116, ]
train_ANN = cbind(train_ANN, train_forecast)
setnames(train_ANN, "x", "Forecast")
train_ANN$Error = (train_ANN$ANN - train_ANN$Forecast)^2
train_ANN$AbsError = abs(train_ANN$ANN - train_ANN$Forecast)
train_ANN$APE = abs(train_ANN$ANN - train_ANN$Forecast)/train_ANN$ANN
SampleSize = nrow(train_ANN)
MSE = sum(train_ANN$Error)/SampleSize
RMSE = sqrt(MSE)
MAE = sum(train_ANN$AbsError)/SampleSize
MAPE = (sum(train_ANN$APE)/SampleSize)*100
statistics = c("SampleSize", "MSE", "RMSE", "MAE", "MAPE")
Value = rbind(SampleSize, MSE, RMSE, MAE, MAPE)
train_statistics <- data.frame(cbind(statistics, Value))
train_statistics$training_set <- train_statistics$V2
train_statistics$V2 <- NULL
rownames(train_statistics) <-  NULL
# forecasting for test data
ar3_forecast <- forecast(ar3,h = 30)
# plotting the forecasted series
plot(ar3_forecast)
# calculate test accuracy
Forecast = as.data.frame(ar3_forecast$mean)
test_ANN = test[,c("YEAR", "ANN")]
test_ANN = cbind(test_ANN, Forecast)
test_ANN = data.table(test_ANN)
setnames(test_ANN, 'x', 'Forecast')
test_ANN$Error = (test_ANN$ANN - test_ANN$Forecast)^2
test_ANN$AbsError = abs(test_ANN$ANN - test_ANN$Forecast)
test_ANN$APE = abs(test_ANN$ANN - test_ANN$Forecast)/test_ANN$ANN
kable(test_ANN)%>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
SampleSize = nrow(test_ANN)
MSE = sum(test_ANN$Error)/SampleSize
RMSE = sqrt(MSE)
MAE = sum(test_ANN$AbsError)/SampleSize
MAPE = (sum(test_ANN$APE)/SampleSize)*100
statistics = c("SampleSize", "MSE", "RMSE", "MAE", "MAPE")
Value = rbind(SampleSize, MSE, RMSE, MAE, MAPE)
test_statistics <- data.frame(cbind(statistics, Value))
test_statistics$testing_set <- test_statistics$V2
test_statistics$V2 <- NULL
rownames(test_statistics) <-  NULL
# summarising the model results
Finalresult_ar3 = merge(train_statistics, test_statistics, by ="statistics")
kable(Finalresult_ar3, digits = 2)%>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
# fitting the model
NN <- nnetar(train.ts[,18])
NN
# calculate train accuracy
train_forecast = as.data.frame(NN$fitted)
train_ANN = train[,c("YEAR", "ANN")]
#train_ANN = train_ANN[2:116, ]
train_ANN = cbind(train_ANN, train_forecast)
setnames(train_ANN, "x", "Forecast")
train_ANN = train_ANN[2:116,]
train_ANN$Error = (train_ANN$ANN - train_ANN$Forecast)^2
train_ANN$AbsError = abs(train_ANN$ANN - train_ANN$Forecast)
train_ANN$APE = abs(train_ANN$ANN - train_ANN$Forecast)/train_ANN$ANN
SampleSize = nrow(train_ANN)
MSE = sum(train_ANN$Error)/SampleSize
RMSE = sqrt(MSE)
MAE = sum(train_ANN$AbsError)/SampleSize
MAPE = (sum(train_ANN$APE)/SampleSize)*100
statistics = c("SampleSize", "MSE", "RMSE", "MAE", "MAPE")
Value = rbind(SampleSize, MSE, RMSE, MAE, MAPE)
train_statistics <- data.frame(cbind(statistics, Value))
train_statistics$training_set <- train_statistics$V2
train_statistics$V2 <- NULL
rownames(train_statistics) <-  NULL
# forecasting for test data
NN_forecast <- forecast(NN,h = 30)
# plotting the forecasted series
plot(NN_forecast)
# calculate test accuracy
Forecast = as.data.frame(NN_forecast$mean)
test_ANN = test[,c("YEAR", "ANN")]
test_ANN = cbind(test_ANN, Forecast)
test_ANN = data.table(test_ANN)
setnames(test_ANN, 'x', 'Forecast')
test_ANN$Error = (test_ANN$ANN - test_ANN$Forecast)^2
test_ANN$AbsError = abs(test_ANN$ANN - test_ANN$Forecast)
test_ANN$APE = abs(test_ANN$ANN - test_ANN$Forecast)/test_ANN$ANN
kable(test_ANN)%>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
SampleSize = nrow(test_ANN)
MSE = sum(test_ANN$Error)/SampleSize
RMSE = sqrt(MSE)
MAE = sum(test_ANN$AbsError)/SampleSize
MAPE = (sum(test_ANN$APE)/SampleSize)*100
statistics = c("SampleSize", "MSE", "RMSE", "MAE", "MAPE")
Value = rbind(SampleSize, MSE, RMSE, MAE, MAPE)
test_statistics <- data.frame(cbind(statistics, Value))
test_statistics$testing_set <- test_statistics$V2
test_statistics$V2 <- NULL
rownames(test_statistics) <-  NULL
# summarising the model results
Finalresult_NN = merge(train_statistics, test_statistics, by ="statistics")
kable(Finalresult_NN, digits = 2)%>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
rainfall%>%ggplot(aes(YEAR,JJAS))+geom_line()+
geom_point(alpha = 0.5, color = palette_light()[[1]], shape=20,size=2) +
labs(title = "JJAS Rainfall in India", x = "YEAR", y = "JJAS Rainfall",
subtitle = "data from 1871-2016") +
theme_tq()
#Calculating Mean for JJAS
JJAS_mean = mean(rainfall$JJAS)
#Calculating percentage departure From Mean for JJAS
rainfall$Perc_departure_JJAS = ((rainfall$JJAS-JJAS_mean)/JJAS_mean)*100
#plotting combo-chart for ANN
rainfall1 <- subset(rainfall, Perc_departure_JJAS>= 0)
rainfall2 <- subset(rainfall, Perc_departure_JJAS < 0)
perc_dep_JJAS <- ggplot() +
geom_bar(data = rainfall1, aes(x=YEAR, y=Perc_departure_JJAS),stat = "identity",colour = "lightgreen") +
geom_bar(data = rainfall2, aes(x=YEAR, y=Perc_departure_JJAS),stat = "identity",colour = "pink")  +
geom_ma(data = rainfall,aes(x= YEAR, y= Perc_departure_JJAS), ma_fun = SMA, n = 11, color = "blue",size = 1)
perc_dep_JJAS
series.end <- floor(0.8*nrow(rainfall)) #select the first 80% of the data
train <- rainfall[1:series.end,] #assign the first 80% of the data to the train set
test <- rainfall[(series.end+1):nrow(rainfall),] #assign the most recent 20% to the test set
# Convert data frame into time serise object
train.ts <- ts(train, start = c(1871), end = c(1986))
test.ts <- ts(test, start = c(1987), end = c(2016))
pander(adf.test(train.ts[, 16], alternative = "stationary"))
# Simple Exponetial Smoothing
SimpleExpSmooth <- HoltWinters(train.ts[, 16], beta=FALSE, gamma = FALSE)
SimpleExpSmooth
# Plotting the estimates
plot(SimpleExpSmooth)
train_forecast = as.data.frame(SimpleExpSmooth$fitted)
train_JJAS = train[,c("YEAR", "JJAS")]
train_JJAS = train_JJAS[2:116, ]
train_JJAS = cbind(train_JJAS, train_forecast)
train_JJAS$xhat <- NULL
setnames(train_JJAS, "level", "Forecast")
train_JJAS$Error = (train_JJAS$JJAS - train_JJAS$Forecast)^2
train_JJAS$AbsError = abs(train_JJAS$JJAS - train_JJAS$Forecast)
train_JJAS$APE = abs(train_JJAS$JJAS - train_JJAS$Forecast)/train_JJAS$JJAS
SampleSize = nrow(train_JJAS)
MSE = sum(train_JJAS$Error)/SampleSize
RMSE = sqrt(MSE)
MAE = sum(train_JJAS$AbsError)/SampleSize
MAPE = (sum(train_JJAS$APE)/SampleSize)*100
statistics = c("SampleSize", "MSE", "RMSE", "MAE", "MAPE")
Value = rbind(SampleSize, MSE, RMSE, MAE, MAPE)
train_statistics <- data.frame(cbind(statistics, Value))
train_statistics$training_set <- train_statistics$V2
train_statistics$V2 <- NULL
rownames(train_statistics) <-  NULL
library(forecast)
prediction_SES <- forecast(SimpleExpSmooth, h=30)
plot(prediction_SES)
Forecast = as.data.frame(prediction_SES$mean)
test_JJAS = test[,c("YEAR", "JJAS")]
test_JJAS = cbind(test_JJAS, Forecast)
test_JJAS = data.table(test_JJAS)
setnames(test_JJAS, 'x', 'Forecast')
test_JJAS$Error = (test_JJAS$JJAS - test_JJAS$Forecast)^2
test_JJAS$AbsError = abs(test_JJAS$JJAS - test_JJAS$Forecast)
test_JJAS$APE = abs(test_JJAS$JJAS - test_JJAS$Forecast)/test_JJAS$JJAS
kable(test_JJAS)%>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
SampleSize = nrow(test_JJAS)
MSE = sum(test_JJAS$Error)/SampleSize
RMSE = sqrt(MSE)
MAE = sum(test_JJAS$AbsError)/SampleSize
MAPE = (sum(test_JJAS$APE)/SampleSize)*100
statistics = c("SampleSize", "MSE", "RMSE", "MAE", "MAPE")
Value = rbind(SampleSize, MSE, RMSE, MAE, MAPE)
test_statistics <- data.frame(cbind(statistics, Value))
test_statistics$testing_set <- test_statistics$V2
test_statistics$V2 <- NULL
rownames(test_statistics) <-  NULL
Finalresult_SES = merge(train_statistics, test_statistics, by ="statistics")
kable(Finalresult_SES)%>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
# Exponetial Smoothing
ExpSmooth <- HoltWinters(train.ts[, 16], gamma = FALSE)
ExpSmooth
# Exponetial Smoothing
ExpSmooth <- ets(train.ts[, 16])
ExpSmooth
# Plotting the estimates
plot(ExpSmooth)
train_forecast = as.data.frame(ExpSmooth$fitted)
train_JJAS = train[,c("YEAR", "JJAS")]
train_JJAS = train_JJAS[1:116, ]
train_JJAS = cbind(train_JJAS, train_forecast)
train_JJAS$xhat <- NULL
setnames(train_JJAS, "x", "Forecast")
train_JJAS$Error = (train_JJAS$JJAS - train_JJAS$Forecast)^2
train_JJAS$AbsError = abs(train_JJAS$JJAS - train_JJAS$Forecast)
train_JJAS$APE = abs(train_JJAS$JJAS - train_JJAS$Forecast)/train_JJAS$JJAS
SampleSize = nrow(train_JJAS)
MSE = sum(train_JJAS$Error)/SampleSize
RMSE = sqrt(MSE)
MAE = sum(train_JJAS$AbsError)/SampleSize
MAPE = (sum(train_JJAS$APE)/SampleSize)*100
statistics = c("SampleSize", "MSE", "RMSE", "MAE", "MAPE")
Value = rbind(SampleSize, MSE, RMSE, MAE, MAPE)
train_statistics <- data.frame(cbind(statistics, Value))
train_statistics$training_set <- train_statistics$V2
train_statistics$V2 <- NULL
rownames(train_statistics) <-  NULL
library(forecast)
prediction_SES <- forecast(ExpSmooth, h=30)
plot(prediction_SES)
Forecast = as.data.frame(prediction_SES$mean)
test_JJAS = test[,c("YEAR", "JJAS")]
test_JJAS = cbind(test_JJAS, Forecast)
test_JJAS = data.table(test_JJAS)
setnames(test_JJAS, 'x', 'Forecast')
test_JJAS$Error = (test_JJAS$JJAS - test_JJAS$Forecast)^2
test_JJAS$AbsError = abs(test_JJAS$JJAS - test_JJAS$Forecast)
test_JJAS$APE = abs(test_JJAS$JJAS - test_JJAS$Forecast)/test_JJAS$JJAS
kable(test_JJAS)%>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
SampleSize = nrow(test_JJAS)
MSE = sum(test_JJAS$Error)/SampleSize
RMSE = sqrt(MSE)
MAE = sum(test_JJAS$AbsError)/SampleSize
MAPE = (sum(test_JJAS$APE)/SampleSize)*100
statistics = c("SampleSize", "MSE", "RMSE", "MAE", "MAPE")
Value = rbind(SampleSize, MSE, RMSE, MAE, MAPE)
test_statistics <- data.frame(cbind(statistics, Value))
test_statistics$testing_set <- test_statistics$V2
test_statistics$V2 <- NULL
rownames(test_statistics) <-  NULL
Finalresult_ES = merge(train_statistics, test_statistics, by ="statistics")
kable(Finalresult_ES)%>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
ggAcf(train.ts[,16],main="non differenced data",lag=40)
ggPacf(train.ts[,16],main="non differenced data",lag=40)
# fitting the model
ar3 <- arima(train.ts[,16], order=c(1, 0, 0))
ar3
# calculate train accuracy
train_forecast = as.data.frame(fitted(ar3))
train_JJAS = train[,c("YEAR", "JJAS")]
#train_JJAS = train_JJAS[3:116, ]
train_JJAS = cbind(train_JJAS, train_forecast)
setnames(train_JJAS, "x", "Forecast")
train_JJAS$Error = (train_JJAS$JJAS - train_JJAS$Forecast)^2
train_JJAS$AbsError = abs(train_JJAS$JJAS - train_JJAS$Forecast)
train_JJAS$APE = abs(train_JJAS$JJAS - train_JJAS$Forecast)/train_JJAS$JJAS
SampleSize = nrow(train_JJAS)
MSE = sum(train_JJAS$Error)/SampleSize
RMSE = sqrt(MSE)
MAE = sum(train_JJAS$AbsError)/SampleSize
MAPE = (sum(train_JJAS$APE)/SampleSize)*100
statistics = c("SampleSize", "MSE", "RMSE", "MAE", "MAPE")
Value = rbind(SampleSize, MSE, RMSE, MAE, MAPE)
train_statistics <- data.frame(cbind(statistics, Value))
train_statistics$training_set <- train_statistics$V2
train_statistics$V2 <- NULL
rownames(train_statistics) <-  NULL
# forecasting for test data
ar3_forecast <- forecast(ar3,h = 30)
# plotting the forecasted series
plot(ar3_forecast)
# calculate test accuracy
Forecast = as.data.frame(ar3_forecast$mean)
test_JJAS = test[,c("YEAR", "JJAS")]
test_JJAS = cbind(test_JJAS, Forecast)
test_JJAS = data.table(test_JJAS)
setnames(test_JJAS, 'x', 'Forecast')
test_JJAS$Error = (test_JJAS$JJAS - test_JJAS$Forecast)^2
test_JJAS$AbsError = abs(test_JJAS$JJAS - test_JJAS$Forecast)
test_JJAS$APE = abs(test_JJAS$JJAS - test_JJAS$Forecast)/test_JJAS$JJAS
kable(test_JJAS)%>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
SampleSize = nrow(test_JJAS)
MSE = sum(test_JJAS$Error)/SampleSize
RMSE = sqrt(MSE)
MAE = sum(test_JJAS$AbsError)/SampleSize
MAPE = (sum(test_JJAS$APE)/SampleSize)*100
statistics = c("SampleSize", "MSE", "RMSE", "MAE", "MAPE")
Value = rbind(SampleSize, MSE, RMSE, MAE, MAPE)
test_statistics <- data.frame(cbind(statistics, Value))
test_statistics$testing_set <- test_statistics$V2
test_statistics$V2 <- NULL
rownames(test_statistics) <-  NULL
# summarising the model results
Finalresult_ar3 = merge(train_statistics, test_statistics, by ="statistics")
kable(Finalresult_ar3, digits = 2)%>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
# fitting the model
NN <- nnetar(train.ts[,16], order=c(1, 0, 0))
NN
# calculate train accuracy
train_forecast = as.data.frame(fitted(NN))
train_JJAS = train[,c("YEAR", "JJAS")]
train_JJAS = cbind(train_JJAS, train_forecast)
setnames(train_JJAS, "x", "Forecast")
train_JJAS = train_JJAS[2:116, ]
train_JJAS$Error = (train_JJAS$JJAS - train_JJAS$Forecast)^2
train_JJAS$AbsError = abs(train_JJAS$JJAS - train_JJAS$Forecast)
train_JJAS$APE = abs(train_JJAS$JJAS - train_JJAS$Forecast)/train_JJAS$JJAS
SampleSize = nrow(train_JJAS)
MSE = sum(train_JJAS$Error)/SampleSize
RMSE = sqrt(MSE)
MAE = sum(train_JJAS$AbsError)/SampleSize
MAPE = (sum(train_JJAS$APE)/SampleSize)*100
statistics = c("SampleSize", "MSE", "RMSE", "MAE", "MAPE")
Value = rbind(SampleSize, MSE, RMSE, MAE, MAPE)
train_statistics <- data.frame(cbind(statistics, Value))
train_statistics$training_set <- train_statistics$V2
train_statistics$V2 <- NULL
rownames(train_statistics) <-  NULL
# forecasting for test data
NN_forecast <- forecast(NN,h = 30)
# plotting the forecasted series
plot(NN_forecast)
# calculate test accuracy
Forecast = as.data.frame(NN_forecast$mean)
test_JJAS = test[,c("YEAR", "JJAS")]
test_JJAS = cbind(test_JJAS, Forecast)
test_JJAS = data.table(test_JJAS)
setnames(test_JJAS, 'x', 'Forecast')
test_JJAS$Error = (test_JJAS$JJAS - test_JJAS$Forecast)^2
test_JJAS$AbsError = abs(test_JJAS$JJAS - test_JJAS$Forecast)
test_JJAS$APE = abs(test_JJAS$JJAS - test_JJAS$Forecast)/test_JJAS$JJAS
kable(test_JJAS)%>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
SampleSize = nrow(test_JJAS)
MSE = sum(test_JJAS$Error)/SampleSize
RMSE = sqrt(MSE)
MAE = sum(test_JJAS$AbsError)/SampleSize
MAPE = (sum(test_JJAS$APE)/SampleSize)*100
statistics = c("SampleSize", "MSE", "RMSE", "MAE", "MAPE")
Value = rbind(SampleSize, MSE, RMSE, MAE, MAPE)
test_statistics <- data.frame(cbind(statistics, Value))
test_statistics$testing_set <- test_statistics$V2
test_statistics$V2 <- NULL
rownames(test_statistics) <-  NULL
# summarising the model results
Finalresult_NN = merge(train_statistics, test_statistics, by ="statistics")
kable(Finalresult_NN, digits = 2)%>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
rainfall%>%ggplot(aes(YEAR,ANN))+geom_line()+
geom_point(alpha = 0.5, color = palette_light()[[1]], shape=20,size=2) +
labs(title = "Annual Rainfall in India", x = "YEAR", y = "Annual Rainfall",
subtitle = "data from 1871-2016") +
theme_tq()
# Simple Exponetial Smoothing
SimpleExpSmooth <- HoltWinters(train.ts[,18], beta=FALSE, gamma = FALSE)
SimpleExpSmooth
# Plotting the estimates
plot(SimpleExpSmooth)
train_forecast = as.data.frame(SimpleExpSmooth$fitted)
train_ANN = train[,c("YEAR", "ANN")]
train_ANN = train_ANN[2:116, ]
train_ANN = cbind(train_ANN, train_forecast)
train_ANN$xhat <- NULL
setnames(train_ANN, "level", "Forecast")
# Simple Exponetial Smoothing
SimpleExpSmooth <- HoltWinters(train.ts[,18], beta=FALSE, gamma = FALSE)
SimpleExpSmooth
# Plotting the estimates
plot(SimpleExpSmooth)
train_forecast = as.data.frame(SimpleExpSmooth$fitted)
train_ANN = train[,c("YEAR", "ANN")]
train_ANN = train_ANN[2:116, ]
train_ANN = cbind(train_ANN, train_forecast)
train_ANN$xhat <- NULL
setnames(train_ANN, "level", "Forecast")
rainfall %>% ggplot(aes(YEAR,ANN))+geom_line()+
geom_point(alpha = 0.5, color = palette_light()[[1]], shape=20,size=2) +
labs(title = "Annual Rainfall in India", x = "YEAR", y = "Annual Rainfall",
subtitle = "data from 1871-2016") +
theme_tq()
rainfall %>% ggplot(aes(YEAR,ANN))+geom_line()+
geom_point(alpha = 0.5, color = palette_light()[[1]], shape=20,size=2) +
labs(title = "Annual Rainfall in India", x = "YEAR", y = "Annual Rainfall",
subtitle = "data from 1871-2016") +
theme_tq()
list.of.packages <-c("data.table","dplyr","plyr","sqldf","reshape","pastecs","psych",
"tidyquant","nortest","tseries","ggthemes","ggplot2","scales",
"forecast","Metrics","kableExtra","pander",
"tidyverse","lubridate","timeSeries","magrittr","recipes")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
pander::pander("All libraries are updated and installed")
mdata <- melt(rainfall, id="YEAR")
In statistics, prediction is a part of statistical inference. One particular approach to such inference is known as predictive inference, but the prediction can be undertaken within any of the several approaches to statistical inference. Indeed, one description of statistics is that it provides a means of transferring knowledge about a sample of a population to the whole population, and to other related populations, which is not necessarily the same as prediction over time. When information is transferred across time, often to specific points in time, the process is known as forecasting.
+ Fully formed statistical models for stochastic simulation purposes, so as to generate alternative versions of the time series, representing what might happen over non-specific time-periods in the future
+ Simple or fully formed statistical models to describe the likely outcome of the time series in the immediate future, given knowledge of the most recent outcomes (forecasting).
+ Forecasting on time series is usually done using automated statistical software packages and programming languages, such as Wolfram Mathematica, R, S, SAS, SPSS, Minitab, pandas (Python) and many others.
+ Forecasting on large scale data is done using Spark which has spark-ts as a third party package.
# Normal distribution line in histogram
hist(rainfall$JJAS, freq=FALSE, col="skyblue", xlab="Monsoon Rainfall", main= "Histogram of Monsoon Rainfall")
curve(dnorm(x, mean=mean(rainfall$JJAS), sd=sd(rainfall$JJAS)), add=TRUE, col="red")
boxplot(rainfall$JJAS,col = "pink",ylab="Monsoon Rainfall",
main= "Box-plot of Monsoon Rainfall")
# Normal distribution line in histogram
hist(rainfall$ANN, freq=FALSE, col="skyblue", xlab="Annual Rainfall", main= "Histogram of Annual Rainfall")
curve(dnorm(x, mean=mean(rainfall$ANN), sd=sd(rainfall$ANN)), add=TRUE, col="red")
# Normal distribution line in histogram
hist(rainfall$ANN, freq=FALSE, col="skyblue", xlab="Annual Rainfall", main= "Histogram of Annual Rainfall")
curve(dnorm(x, mean=mean(rainfall$ANN), sd=sd(rainfall$ANN)), add=TRUE, col="red")
# Simple Exponetial Smoothing
SimpleExpSmooth <- HoltWinters(train.ts[,18], beta=FALSE, gamma = FALSE)
SimpleExpSmooth
# Plotting the estimates
# plot(SimpleExpSmooth)
train_forecast = as.data.frame(SimpleExpSmooth$fitted)
train_ANN = train[,c("YEAR", "ANN")]
train_ANN = train_ANN[2:116, ]
train_ANN = cbind(train_ANN, train_forecast)
train_ANN$xhat <- NULL
setnames(train_ANN, "level", "Forecast")
install.packages("staplr")
install.packages("forecast")
install.packages(c("data.table", "dplyr", "forecast", "ggplot2", "ggthemes", "kableExtra", "lubridate", "Metrics", "nortest", "pander", "pastecs", "plyr", "psych", "recipes", "reshape", "scales", "sqldf", "tidyquant", "tidyverse", "timeSeries", "tseries"))
install.packages("forecast")
install.packages("devtools")
install.packages("forecast")
